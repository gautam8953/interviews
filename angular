Q. difference in angular js and angular 
Ans. 
   Architecture
   A. It supports the Model-View-Controller design. The view processes the information available in the model to generate the output. 	
   B. It uses components and directives. Components are the directives with a template.
   Written Language	
   A. Written in JavaScript. 	
   B. Written in Microsoft’s TypeScript language, which is a superset of ECMAScript 6 (ES6).
   Mobile support	
   A. It does not support mobile browsers. 	
   B. Angular is supported by all the popular mobile browsers.
   
Q. What are some of the advantages of Angular over other frameworks?
Ans A.  Excellent Material Design Library
   B. Efficient Problem-Solving Patterns
   C. More Lightweight Web Applications
   D. Readable and Testable Code
   E. Faster Development Process
   
Q. latest angular version -> whats new in it -> latest angular worked on 
Q. angular project setup -> how code generate
Ans. install nodejs. npm installed by default. Then install angular by command npm install -g @angular/cli
      -g measn it will be installed globaly. for specific version npm install -g @angular/cli@8.3.19
      
Q. angular architecture 
Ans. Here’s a list of the most important files on the root folder, created by Angular CLI:
      –  package.json – containing all the packages needed for development and production
      –  tsconfig.json – containing TypeScript transpilation configuration
      –  tslint.json – containing all the rules for TypeScript static code analysis (ie. linting)
      –  angular.json – containing options for building and configuring Angular projects
      Everything else is located on the src folder, including the following:
      – index.html – as a single entry point for serving the Angular application
      – main.ts – representing the main TypeScript file for bootstrapping the application
      – styles.scss – as a globally defined cascading stylesheets (CSS) file (or any other CSS compiler file supported by the configuration)
      – app folder – containing all the Angular code
      – assets folder – containing static files (eg. images, fonts, JSON files)
      – environments folder – containing different environments used when deploying or testing the application
      
in build following files generated : 
   – main.js – containing the application-based transpiled code (what we made by ourselves)
   – polyfills.js – containing the additional code logic for supporting versions of older browsers
   – runtime.js – containing the plumbing code of Angular to run the application
   -scripts. js – with all the script code required for support styles and custom JavaScript libraries
   – styles.js – containing styles, defined by the application and from the third-party UX libraries (such as Bootstrap)
   – vendor.ts – the code that’s coming from the node_modules folder (ie. third-party libraries, including Angular itself).

Q. how many files generated in component and use of it
Ans. 4 files are generated. CSS, HTML, SPEC, TS
      A. CSS -> for style 
      B. HTML -> for display 
      C. SPEC -> The spec files are unit tests for your source files. The convention for Angular applications is to have a .spec.ts file for each .ts file. 
         They are run using the Jasmine javascript test framework through the Karma test runner (https://karma-runner.github.io/) when you use the ng test command
      D. TS -> for logics and 
   
Q.  angular code execution flow 
Ans. angular.json -> angular-cli configuration file main.ts -> Angular module bootstrap application file. 
   Set the entry module for your application. app.module.ts -> 
   Based upon your entry module, it configures which component will load first from that module and what others dependency modules, components, pipes, services.

Q. what is polyfil and why polyfil.ts is used?
Ans. Polyfills in basic language are extra lines of code which make your application compatible for different browsers. 
   The code we write is mostly in ES6(New Features: Overview and Comparison) and is not compatible with IE or firefox 
   and needs some environment setups before being able to be viewed or used in these browsers. 
   So, the polyfills takes uo the task abd do these low level setups for you.
   This file is divided into 2 sections:
   A. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
   B. Application imports. Files imported after ZoneJS should be loaded before your main file

Q. what is decorator in angular : Decorators are functions that are invoked with a prefixed @ symbol, and are immediately followed by a class, method or property. 
   They allow a service, directive or filter to be changed before being used. 
   Basically, a decorator provides configuration metadata that determines how the component, class or a function should be processed, instantiated and used at runtime.
   
  -> Types of Decorators - There are four types of decorators and each type further has its own subset of decorators
    1.class : This is the first type of decorator which tells us about a particular class’s intent and helps answer questions like whether the class is a component or a module. 
          There are various Class decorators in Angular, and among them @Component and @NgModule are widely used
    2.method : Method decorators, as the name indicates, are used to decorate the method defined inside our class with functionality
    3.property : Property decorators are used to decorate specific properties inside a class. Using a property decorator, 
           we can easily identify why we use any particular property of a class Like @Input (), @Output, @ReadOnly (), @Override ()
    4.Parameter Decorators: Parameter decorators allow us to decorate parameters in our class constructors.  
           @Inject () is a common and widely used parameter decorator. Using this decorator, we can inject services in Angular classes
	   
Q. what is lazy loading and how to achieve it .
Ans. To lazy load Angular modules, use loadChildren (instead of component) in your AppRoutingModule routes. it load the defined folder when route matches.
   
Q. explain process to implement authorisation in a big application.
A. authentication : Authentication (AuthN) is a process that verifies that someone is who? example : login authetication
    identitiy authentication : Identity authentication is the process of verifying the identity of a user or service. example : manager or employee
   authorization : Authorization is the security process that determines a user or service's level of access.
   after login determine waht manager user have access and what employee user has access.

Q. jit and eot 
A. The main differences between JIT and AOT in Angular are:
   Just-in-Time (JIT), compiles your app in the browser at runtime.
   1. laods application slower as it need to compile the application when running for the first time
   2. it download compiler nad compiles the application before displaying 
   3. since code include compiler code, so bundle size will be high
   4. suitable for development 
   5. example command : ng serve, ng build 
   6. template binding error can be viewd at the time of displaying application
   
   Ahead-of-Time (AOT), compiles your app at build time on the server.
   1. laods application quiclly than jit
   2. doesn't need to downlaod compiler as already compiles the code while building application
   3. since compiled and optimized so bundle size is less
   4. suitable for production
   5. example command : ng serve --aot, ng build --aot , ng build --prod
   6. template binding error are sgown at time of building
 
Q. testing setup in angular, process

Q. what is auth guard?

Q. what is pipes? difference in pure and impur pipes?

Q. how to create a module 

Q. Explain Components, Modules and Services in Angular
Ans. Services are plain Typescript / JavaScript class providing a very specific functionality
 
Q. what is property binding 

Q. what is forRoot() in modules? What is its use?

Q. version controlling in angular 
 
Q. angular life cycle and its uses 

Q. pristine VS dirty VS touched
valid: This property returns true if the element’s contents are valid and false otherwise.
invalid: This property returns true if the element’s contents are invalid and false otherwise.
pristine: This property returns true if the element’s contents have not been changed.
dirty: This property returns true if the element’s contents have been changed.
untouched: This property returns true if the user has not visited the element.
touched: This property returns true if the user has visited the element.

Q. what is property binding and string interpolation in angular

Q. What is the purpose of Wildcard route?
	If the URL doesn't match any predefined routes then it causes the router to throw an error and crash the app. In this case, you can use wildcard route. A wildcard route has a path consisting of two asterisks to match every URL.
	{ path: '**', component: PageNotFoundComponent }
	
Q. Why should ngOnInit be used, if we already have a constructor?
	The Constructor is a default method of the class that is executed when the class is instantiated and ensures proper initialization of fields in the class and its subclasses.
	ngOnInit is a life cycle hook called by Angular2 to indicate that Angular is done creating the component.

	Mostly we use ngOnInit for all the initialization/declaration and avoid stuff to work in the constructor. The constructor should only be used to initialize class members but shouldn't do actual "work". So you should use constructor() to setup Dependency Injection and not much else. ngOnInit() is better place to "start" - it's where/when components' bindings are resolved.

Q. How to detect a route change in Angular?
	
Q. What is Angular Ivy?
	Answer : A big part of Angular is its compiler: it takes all your HTML and generates the necessary JS code. This compiler (and the runtime) has been completely rewritten over the last year, and this is what Ivy is about. The last rewrite was done in Angular 4.0.
	Ivy is a complete rewrite of the compiler (and runtime) in order to:
	reach better build times (with a more incremental compilation)
	reach better build sizes (with a generated code more compatible with tree-shaking)
	unlock new potential features (metaprogramming or higher order components, lazy loading of component instead of modules, a new change detection system not based on zone.js…)
Q. What is Bazel?
	Google open sourced the software responsible for building most of its projects under the name Bazel. Bazel is a powerful tool which can keep track of the dependencies between different packages and build targets.
	Some of the features of Bazel are:
	1. It has a smart algorithm for determining the build dependencies - based on the dependency graph of a project, Bazel determines which targets it can build in parallel
	2. Bazel is independent of the tech stack. We can build anything we want with it using the same interface. For example, there are plugins for Java, Go, TypeScript, JavaScript, and more

9. how to share data between two independent component
Q. how to protetct a root from unauthorise access
Q. process to call a api in angular?
ng store use and example 
Difference between ng-template, ng-container and ng-content
what is rest api  (representational state transfer) (stateless/statefull)

logical
1. create a page architecture for listing of multiple student and form also for mmultiple student.
2. how to implement lazy loading 
3. how to implemnt authorisation steps 
4. version control in angular 
5. three select options are there, two have common data and third one have that common data. when a valuse is selected in third select option,
   other select option automaticaly select the valuse that is selected in third select option

Q. difference in angular js and angular 
A. 
   Architecture
   A. It supports the Model-View-Controller design. The view processes the information available in the model to generate the output. 	
   B. It uses components and directives. Components are the directives with a template.
   Written Language	
   A. Written in JavaScript. 	
   B. Written in Microsoft’s TypeScript language, which is a superset of ECMAScript 6 (ES6).
   Mobile support	
   A. It does not support mobile browsers. 	
   B. Angular is supported by all the popular mobile browsers.
   
Q. What are some of the advantages of Angular over other frameworks?
A. A. Excellent Material Design Library
   B. Efficient Problem-Solving Patterns
   C. More Lightweight Web Applications
   D. Readable and Testable Code
   E. Faster Development Process
   
Q. latest angular version -> whats new in it -> latest angular worked on 
A. Angular 13 on November 3, 2021
	Feature : 
	1. Support for TypeScript 4.4
	2. No Longer Support for Internet Explorer 11
	3. Improvements in Localization : $localize is a consistent API. 
		Developers use it to produce an effective way for in-built internationalization (i18n) 
		and tag messages for translation in code and templates
	4. New Type of Forms : Angular v13 highlights a new type of form: FormControlStatus. 
		It accumulates all status strings for form controls: 
	
	Angular 14 was released on 2 June 2022.
	features : 
	1. Angular CLI Auto-Completion - execute 'ng completion' for one time in terminal.
		then by pressing tab after 'ng' you can get suggestion on cli commands
	2. Strictly Typed Forms : now accepts a generic type that describes the type of value it holds for the first time.
	3. Standalone Components : Now you can use Angular modules as an option. you can also use standalone components for the first time
	4. Enhanced Template Diagnostics : better template diagnostics, allowing Angular developers to be protected from common errors by the compiler
	5. Angular DevTools : In offline mode, you can use the Angular DevTools debugging plugin
	
	Angular 15 was released on 16 November 2022.
	1. Stable Standalone APIs : Now Angular 15 can allow developers to build Angular applications without any module
	2. Http with provideHttpClient : With the help of provideHttpClient(), it’s possible to offer the HttpClient. 
		HTTP interceptors are also evolving and can now be defined as functions.
	3. Optimized CLI with a Bunch of Improvements
	4. Router Unwraps Default Imports : The router now automatically unwraps default exports when lazy loading, 
		simplifying the router even more and reducing boilerplate.
	5. Forms : The forms package now includes the utility functions like, isFormControl, isFormGroup, isFormRecord, and isFormArray

Q. angular project setup -> how code generate
Ans. install nodejs. npm installed by default. 
	Then install angular by command npm install -g @angular/cli
    -g means it will be installed globaly. 
	for specific version npm install -g @angular/cli@8.3.19
      
Q. angular architecture 
Ans. Here’s a list of the most important files on the root folder, created by Angular CLI:
      –  package.json – containing all the packages needed for development and production
      –  tsconfig.json – containing TypeScript transpilation configuration
      –  tslint.json – containing all the rules for TypeScript static code analysis (ie. linting)
      –  angular.json – containing options for building and configuring Angular projects
      Everything else is located on the src folder, including the following:
      – index.html – as a single entry point for serving the Angular application
      – main.ts – representing the main TypeScript file for bootstrapping the application
      – styles.scss – as a globally defined cascading stylesheets (CSS) file (or any other CSS compiler file supported by the configuration)
      – app folder – containing all the Angular code
      – assets folder – containing static files (eg. images, fonts, JSON files)
      – environments folder – containing different environments used when deploying or testing the application
      
in build following files generated : 
   – main.js – containing the application-based transpiled code (what we made by ourselves)
   – polyfills.js – containing the additional code logic for supporting versions of older browsers
   – runtime.js – containing the plumbing code of Angular to run the application
   -scripts. js – with all the script code required for support styles and custom JavaScript libraries
   – styles.js – containing styles, defined by the application and from the third-party UX libraries (such as Bootstrap)
   – vendor.ts – the code that’s coming from the node_modules folder (ie. third-party libraries, including Angular itself).

Q. command to generate application, component, model, module, service etc
A. 	application : ng new newApp
	component:
	model: 
	module: 
	service: 

Q. how many files generated in component and use of it
Ans. 4 files are generated. CSS, HTML, SPEC, TS
      A. CSS -> for style 
      B. HTML -> for display 
      C. SPEC -> The spec files are unit tests for your source files. The convention for Angular applications is to have a .spec.ts file for each .ts file. 
         They are run using the Jasmine javascript test framework through the Karma test runner (https://karma-runner.github.io/) when you use the ng test command
      D. TS -> for logics and 
   
Q.  angular code execution flow 
Ans. angular.json -> angular-cli configuration file main.ts -> Angular module bootstrap application file. 
   Set the entry module for your application. app.module.ts -> 
   Based upon your entry module, it configures which component will load first from that module 
   and what others dependency modules, components, pipes, services.

Q. what is polyfil and why polyfil.ts is used?
Ans. Polyfills in basic language are extra lines of code which make your application compatible for different browsers. 
   The code we write is mostly in ES6(New Features: Overview and Comparison) and is not compatible with IE or firefox 
   and needs some environment setups before being able to be viewed or used in these browsers. 
   So, the polyfills takes uo the task abd do these low level setups for you.
   This file is divided into 2 sections:
   A. Browser polyfills. These are applied before loading ZoneJS and are sorted by browsers.
   B. Application imports. Files imported after ZoneJS should be loaded before your main file

Q. what is directive in angular and its types?
A. In Angular, Directives are defined as classes that can add new behavior to the elements in the template or modify existing behavior.
    The purpose of Directives in Angular is to maneuver the DOM, be it by adding new elements to DOM or 
    removing elements and even changing the appearance of the DOM elements.
    Directives are meant to be a function that executes when found in the DOM by the Angular compiler to extend the power of the HTML with new syntax. 
    Directives have a name and can be predefined or custom-defined so that they can be called anything
  Types of Directives in Angular
  1. Component Directive : Special directives in Angular are called Components since this type of directive has a template or template URLs. 
	In effect, it is a component directive that shows something in DOM.
  2. Structural Directive : This type of directive is used to make changes in the layout of the DOM. 
	Elements can be added or removed, hence changing the structure of the DOM.
	ex: *ngIf, *ngFor
  3. Attribute directive : This type of angular directive is used to make behavior or element changes in the appearance and behavior of an element. 
	For example, ngStyle( applying styles) or ngClass(applying CSS classes).
  Creating Our Own Attribute Directive : The purpose of the following attribute directive is to change the text color whenever the pointer hovers over it.
	Custom Directive is very similar to creating the Angular component. 
	The custom directive is created using the @Directive decorator to replace the @component decorator.
  1. Create a class with @Directive
  2. Create an Attribute directive with Element Ref
  3. Listen to the Hover event with
  4. HostListener
  	By using handlers, the element is referenced, and the color of the text is changed.
	import{Directive, ElementRef, HostListener} from '@angular/core';
	@Directive({
		selector:'[highlight]',
	})

export class HighlightDirective{
constructor (private eleRef: ElementRef){ }
@HostListerner ('mouseover') on MouseOver(){
this.eleRef.nativeElement .style.color ='green';
}
@hostListener('mouseleave') onMouseLeave(){
this.eleRef.nativeElement.style.color='black' ;
}
}] 

Q. what is decorator in angular : Decorators are functions that are invoked with a prefixed @ symbol, and are immediately followed by a class, method or property. 
   They allow a service, directive or filter to be changed before being used. 
   Basically, a decorator provides configuration metadata that determines how the component, class or a function should be processed, instantiated and used at runtime.
   
  -> Types of Decorators - There are four types of decorators and each type further has its own subset of decorators
    1.class : This is the first type of decorator which tells us about a particular class’s intent and helps answer questions like whether the class is a component or a module. 
          There are various Class decorators in Angular, and among them @Component and @NgModule are widely used
    2.method : Method decorators, as the name indicates, are used to decorate the method defined inside our class with functionality
    3.property : Property decorators are used to decorate specific properties inside a class. Using a property decorator, 
           we can easily identify why we use any particular property of a class Like @Input (), @Output, @ReadOnly (), @Override ()
    4.Parameter Decorators: Parameter decorators allow us to decorate parameters in our class constructors.  
           @Inject () is a common and widely used parameter decorator. Using this decorator, we can inject services in Angular classes
	   
Q. what is lazy loading and how to achieve it .
A. To lazy load Angular modules, use loadChildren (instead of component) in your AppRoutingModule routes. 
	it load the defined folder when route matches.
   
Q. explain process to implement authorisation in a big application.
A. authentication : Authentication (AuthN) is a process that verifies that someone is who? example : login authetication
    identitiy authentication : Identity authentication is the process of verifying the identity of a user or service. example : manager or employee
   authorization : Authorization is the security process that determines a user or service's level of access.
   after login determine waht manager user have access and what employee user has access.

Q. jit and aot 
A. The main differences between JIT and AOT in Angular are:
   Just-in-Time (JIT), compiles your app in the browser at runtime.
   1. laods application slower as it need to compile the application when running for the first time
   2. it download compiler nad compiles the application before displaying 
   3. since code include compiler code, so bundle size will be high
   4. suitable for development 
   5. example command : ng serve, ng build 
   6. template binding error can be viewd at the time of displaying application
   
   Ahead-of-Time (AOT), compiles your app at build time on the server.
   1. laods application quiclly than jit
   2. doesn't need to downlaod compiler as already compiles the code while building application
   3. since compiled and optimized so bundle size is less
   4. suitable for production
   5. example command : ng serve --aot, ng build --aot , ng build --prod
   6. template binding error are sgown at time of building
 
Q. testing setup in angular, process
A. The project you create with the CLI is immediately ready to test. Just run the ng test CLI command
	The ng test command builds the application in watch mode, and launches the Karma test runner

Q. what is auth guard?
A. AuthGuard is used to protect the routes from unauthorized access in angular. 
	Auth guard provide lifecycle event called canActivate. The canActivate is like a constructor. 
	It will be called before accessing the routes. The canActivate has to return true to access the page.
	If it returns false, we can not access the page. 
	We can write our user authorization and authentication logic inside the canActivate function.
	
	CanDeactivate :  The Angular CanDeactivate Guard determines whether we can navigate away from a route.
	The CanDeactivate guard gives us a chance to warn the user that 
	he has not saved his work and give him a chance to cancel the navigation
	
Q. how to protetct a root from unauthorise access
A. by using auth guard canActivate method.

Q. what is pipes? difference in pure and impur pipes?
A. Pipes are simply a function that we can directly apply on any expression/value in a template to transform it into some other value.
	Built-in pipes in Angular : 
	uppercase (to convert string in upper case);
	lowercase (to convert string in upper case);
	date (to format the date into different types);
	json (to convert a value or object into JSON formatted string). 
	<p>{{ 'Makesh' | uppercase }}</p>

	Types of pipes : 
	1. Pure Pipes : A pure pipe is only called when Angular detects a change in the value or the parameters passed to a pipe.  
	2. Impure Pipes : An impure pipe is called for every change detection cycle no matter whether the value or parameter(s) changes

Q. Explain Components, Modules and Services in Angular. nad how to create it.
A. component is basic building block of a UI in an Angular application.
	It comes as a directive with a special decorator (@Component) and template.
	Component decorator allows you to mark a class as an Angular component 
	and provide additional metadata that determines how the component should be processed, instantiated, and used at runtime
	command : ng g c componentName
	
	The module can be considered as a collection of components, directives, services, pipes, helpers, etc.
	Each component can use other components, which are declared in the same module. 
	To use components declared in other modules, they need to be exported from that module and 
	the module needs to be imported into our module where we need that functionality.
	command : ng g m moduleName

	Services are plain Typescript / JavaScript class providing a very specific functionality. 
	Angular services are objects that get instantiated just once during the lifetime of an application. 
	They contain methods that maintain data throughout the life of an application, i.e., data is available all the time
	
	import { Injectable } from '@angular/core'; 
	@Injectable({ 
		providedIn: 'root', 
	})
	export class DebugService { 
	   constructor() { } 
	}

Q. Explain Event Binding? <button (click)="raiseVolume()"></button>
   Commonly Used Events
   1. Mouse Events: click, dblclick, mousedown, mouseup, mouseenter, mouseleave
   2. Keyboard Events: keydown, keyup, keypress
   3. Form Events: submit, focus, blur
   4. Input Events: input, change

Q. what is property binding 
A. Property Binding is a one-way data-binding technique. 
	we bind a property of a DOM element to a field which is a defined property in our component TypeScript code. 
	<button [disabled]='bool'>GeekyButton</button>
	
Q. what is string interpolation in angular?
A. String Interpolation is a one-way databinding technique which is used to output the data from a TypeScript code to HTML template (view). 
	It uses the template expression in double curly braces to display the data from the component to the view
	
Q. Explain the concept of Data Binding. 
A. Data Binding can be best described as a technique that is used to link the application’s data to the view layer
	There are two types of data binding - 
	1. One-way data-binding: One way data binding is a unidirectional data binding method, 
	  that is, we can either bind the data from the component to the view or bind the data from the view to the component
	2. Two-way data binding: Two-way data binding in Angular version 8 helps the users to exchange data from the component to the view 
	  and from the view to the component

Q. what is forRoot() in modules? What is its use?
A. forRoot() is used when we want to maintain a single instance (singleton)of a service across the application 
	which will also have lazy loaded modules
	The counter is maintained by a CounterService which resides under SharedModule. 
	Since, the lazy loaded modules creates its own instance of service, 
	we lose the singleton behavior of the Angular Services.
	
	In routing module : 
	The forRoot() method creates an NgModule that contains all the directives, the given routes, and the Router service itself.
	The forChild() method creates an NgModule that contains all the directives and the given routes, but does not include the Router service
	
Q. version controlling in angular 
A. steps : 
	1. open tsconfig.app.json & tsconfig.spec.json , add “node” under compilerOptions -> types
	2. open environment.ts and create a property for holding the application version in environment variable 
		export const environment = {
			appVersion: require('../../package.json').version + '-dev',
			production: false
		};
	3. Add version number to a component and show it in the application
		import {Component} from '@angular/core';
		import {environment} from '../environments/environment';

		@Component({
			selector: 'app-root',
			template: `<h1>{{title}}</h1>
			<h3>v{{currentApplicationVersion}}</h3>`
		})
		export class AppComponent {
			title = 'Demo application for version numbering';
			currentApplicationVersion = environment.appVersion;
		}
	4. automatically increase build number in the version property. For this we will use npm version functionality
	5. run : npm version patch   
	The patchargument means, only the patch number will be incremented with 1. 
	this command creates a new commit, to avoid this use '—- no-git-tag-version' flag.
	add "prebuild": "npm --no-git-tag-version version patch", in "scripts": of package.json
 
Q. angular life cycle and its uses 
A. In Angular, each component is channeled through 8 different phases in its lifecycle. 
	To be precise, it is first initialized, and then the root is created and is later presented to its components. 
	It is always checked whenever the components get loaded during the development of the application and are gradually updated.

	Angular executes its life cycle hook methods in a specific order.
	1. Constructor
	2. ngOnChanges : Called when the input properties have changed
		OnChanges is a lifecycle hook that is called when any data-bound property of a directive changes
	3. ngOnInit : Called on initialization
		OnInit is a lifecycle hook that is called after Angular has initialized all data-bound properties of a directive
	4. ngDoCheck : Developer’s custom change detection
		DoCheck is a callback method that performs change detection, invoked after the default change detector runs.
	4.1. ngAfterContentInit : Called when the component’s content ngContent is initialized
	4.2  ngAfterContentChecked : Called when the component’s content is updated or checked for updates
	4.3  ngAfterViewInit : Called when the component’s projected view has been initialized
	4.4  ngAfterViewChecked : Called after the projected view has been checked
	5.   ngOnDestroy : Called before the component is destroyed
		OnDestroy is a lifecycle hook that is called when a directive, pipe, or service is destroyed. 
		Use this for any custom cleanup that needs to occur when the instance is destroyed.
		This hook is mostly used to unsubscribe from our observable streams and detach event handlers to avoid memory leaks.
	
Q. why use constructor if we have ngOnInit
A. Constructor and OnInit seem the same, but they are called at different phases. 
	Angular has two phases: the bootstrapping phase and the change detection phase.
	
	The constructor is a Typescript feature used to instantiate the Typescript class. 
	In most Angular projects about the only thing that should ever be done in the constructor is to inject services.

	The ngOnInit function is specific to the Angular framework and is called when Angular is done creating the component. 
	It should be called with any custom finalization like loading data for your component to display.
	
	The Constructor is a default method of the class that is executed 
	when the class is instantiated and ensures proper initialization of fields in the class and its subclasses.
	ngOnInit is a life cycle hook called by Angular2 to indicate that Angular is done creating the component.

	Mostly we use ngOnInit for all the initialization/declaration and avoid stuff to work in the constructor. 
	The constructor should only be used to initialize class members but shouldn't do actual "work". 
	So you should use constructor() to setup Dependency Injection and not much else. 
	ngOnInit() is better place to "start" - it's where/when components' bindings are resolved.	
	
	

Q. pristine VS dirty VS touched
	valid: This property returns true if the element’s contents are valid and false otherwise.
	invalid: This property returns true if the element’s contents are invalid and false otherwise.
	pristine: This property returns true if the element’s contents have not been changed.
	dirty: This property returns true if the element’s contents have been changed.
	untouched: This property returns true if the user has not visited the element.
	touched: This property returns true if the user has visited the element.



Q. What is the purpose of Wildcard route?
	If the URL doesn't match any predefined routes then it causes the router to throw an error and crash the app. In this case, you can use wildcard route. A wildcard route has a path consisting of two asterisks to match every URL.
	{ path: '**', component: PageNotFoundComponent }
	
Q. subject and BehaviorSubject  difference
A. A BehaviorSubject holds one value. When it is subscribed it emits the value immediately. 
	BehaviorSubject should be created with an initial value: new Rx.BehaviorSubject(1)
	
	A Subject doesn't hold a value.
	
	ReplaySubject is a variant of a Subject which keeps a cache of previous values emitted by a source observable 
	and sends them to all new observers immediately on subscription. 
	
	const subject = new Rx.Subject();
	subject.next(1);
	subject.subscribe(x => console.log(x));
	subject.next(2);
	Console output will be empty. it will console value when we use next(2) after subscribe.
	in above code it will console 2 but not 1.

	BehaviorSubject example:

	const subject = new Rx.BehaviorSubject(0);
	subject.next(1);
	subject.subscribe(x => console.log(x));
	Console output: 1	

Q. How to detect a route change in Angular?
A. import { Router, NavigationStart, NavigationEnd, NavigationError, NavigationCancel, RoutesRecognized } from '@angular/router';
	constructor(router:Router) {
	  router.events.forEach((event) => {
		if(event instanceof NavigationStart) {
		}
		// NavigationEnd
		// NavigationCancel
		// NavigationError
		// RoutesRecognized
	  });
	}
	
Q. What is Angular Ivy?
A: 	A big part of Angular is its compiler: it takes all your HTML and generates the necessary JS code. 
	This compiler (and the runtime) has been completely rewritten over the last year, and this is what Ivy is about. 
	The last rewrite was done in Angular 4.0.
	Ivy is a complete rewrite of the compiler (and runtime) in order to:
	reach better build times (with a more incremental compilation)
	reach better build sizes (with a generated code more compatible with tree-shaking)
	unlock new potential features (metaprogramming or higher order components, lazy loading of component instead of modules, a new change detection system not based on zone.js…)
	
Q. What is Bazel?
	Google open sourced the software responsible for building most of its projects under the name Bazel. Bazel is a powerful tool which can keep track of the dependencies between different packages and build targets.
	Some of the features of Bazel are:
	1. It has a smart algorithm for determining the build dependencies - based on the dependency graph of a project, Bazel determines which targets it can build in parallel
	2. Bazel is independent of the tech stack. We can build anything we want with it using the same interface. For example, there are plugins for Java, Go, TypeScript, JavaScript, and more

Q. how to share data between two independent component
A. 1. Parent to Child component: 
	When you define @Input() in the child component it will receive value from the master or parent component.
	parent code : <app-personal-co-app [personalData]="personalData"></app-personal-co-app>
	childe code : import { Component, OnInit, Input } from '@angular/core';
					@Input() personalData: any;
					
	2. Child to Parent component: For sharing data from child to parent we need output decorator
	In childe code : 
	@Output() childToParent = new EventEmitter<String>();
	sendToParent(name){
		this.childToParent.emit(name);
	}
	in parent code : <app-child (childToParent)=”childToParent($event)”></app-child>
	
	3. Sharing data between sibling components: First share data between the child to parent using output decorator and EventEmitter. 
	Once received data in parent component share it to another child component using Input decorator. 
	So siblings can talk each other via parent components.
	
	4. More Power: Sharing data using ViewChild decorator: 
	import { PersonalCoAppComponent } from './personal-co-app/personal-co-app.component';
	
	@ViewChildren(PersonalCoAppComponent) coappComponents: QueryList<PersonalCoAppComponent>;
	@ViewChild(AppChildComponent) child;
	constructor() { }
	ngAfterViewInit() {
		this.product.productName=child.masterName; //<= This will set data
	}
	5. Sharing data between not related components: This happens when your components are in different modules.
	For creating data service. We have to define BehaviorSubject. BehaviorSubject holds the current value and the last value.
	I always prefer to use BehaviorSubject because of following reasons:
	1. It automatically updates the lates value wherever subscribed.
	2. Always give last value when called via getValue() method.
	3. No need to call next, just create a set and get method in order to get value.
	
	import { Injectable } from '@angular/core';
	import { BehaviorSubject } from 'rxjs';

	@Injectable({
	  providedIn: 'root'
	})
	export class SharedService {
	  
	  private notificationData = new BehaviorSubject<any>({});
	  globalNotificationData = this.notificationData.asObservable();

	  constructor() { }

	  shareNotificationData(notificationDataObj){
		this.notificationData.next(notificationDataObj);
	  }
	}
	
	share data code : this.sharedService.shareNotificationData(sharedNotificationObj);
	get shared data : 
	this.sharedService.globalNotificationData.subscribe(dataShared => {
        this.notifictnCount=dataShared;
    });

Q. process to add a new url in a project 
A. 1. Define the Component for the New Route
   2. Import the RouterModule in Your corresponding Module of the component
   3. Define the Route in the Routing Module which is imported in above module

   4. Add Router Outlet in the Template  - <router-outlet></router-outlet>
   5. Add Links to Navigate to the New Route - <a routerLink="/new-page">Go to New Page</a>
Q. process to call a api in angular?
A. Angular provides HttpClient Module that you can use to consume any API. 
	First, you need to import the module in the AppModule or any other parent module and add it in the imports array.
	import { HttpClientModule } from '@angular/common/http';
	Once it is added in the module you can import that in any service. 
	
	Then create a service and inject the HttpClient in the constructor. 
	Then create methods and use it accordingly. These methods return Observable.
	
	import { Injectable } from '@angular/core';
	import { HttpClient } from '@angular/common/http';

	@Injectable({
	  providedIn: 'root'
	})
	export class AppService {

	  constructor(private http: HttpClient) { }

	  rootURL = '/api';

	  getUsers() {
		return this.http.get(this.rootURL + '/users');
	  }

	}


Q. Difference between ng-template, ng-container and ng-content
A. ng-content is used to display children in a template, 
	ng-container is used as a non-rendered container to avoid having to add a span or a div, 
	and ng-template allows you to group some content that is not rendered directly 
	but can be used in other places of your template or you code.

	1. <ng-template></ng-template> : 
	As the name suggests the it is a template element that Angular uses with structural directives 
	Like :( *ngIf , *ngFor , [ngSwitch] and custom directives)
	
	<div> 
	   Ng-template Content 
	   <div *ngIf=”false else showNgTemplateContent”> 
		  Shouldn't be displayed 
	   </div>
	</div>
 
	<ng-template #showNgTemplateContent> Should be displayed
	</ng-template>
	
	2. <ng-container></ng-container> 
	ng-container is an extremely simple directive that allows you to group elements in a template 
	that doesn’t interfere with styles or layout because Angular doesn’t put it in the DOM.
	This is helpful if you don’t want any extra div on DOM
	
	<ng-container *ngIf="details">
	  <div *ngFor="let info of details">
		{{ info.content }}
	  </div>
	</ng-container>
	
	3. <ng-content></ng-content>
	ng-content is used to project content into Angular components. 
	You use the <ng-content></ng-content> tag as a placeholder for that dynamic content, 
	then when the template is parsed Angular will replace that placeholder tag with your content
	
	<h1>Child Info</h1>
	<ng-content select="[input], [form-field]"></ng-content>
	
	<app-child>
	  <h1 input>Content1!</h3>
	  <h2 form-field>Content2!</h2>
	  <h3 input form-field>Content1 & Content2!</h1>
	</app-child>
	If you check your browser, all the heading tags will be visible from child component with the help of <ng-content>

Q. what is NgRX?
A. NgRx/store is a library for managing state in your Angular applications, it is a reactive state management library powered by RxJS. 
   Similar to Redux, this library can be used to manage the flow of data throughout your application, 
   when actions are dispatched, reducers act on them and mutate the store.

logical
1. create a page architecture for listing of multiple student and form also for mmultiple student.
2. how to implement lazy loading 
3. how to implemnt authorisation steps 
4. version control in angular 
5. three select options are there, two have common data and third one have that common data. when a valuse is selected in third select option,
   other select option automaticaly select the valuse that is selected in third select option
6. real time chat application using angular 


chat GPT 


Angular Architecture
Q. Can you explain the architecture of an Angular application?
Q. How does Angular's dependency injection work?
A. What is Dependency Injection : 
   Dependency Injection (DI) in Angular is a design pattern that allows classes to be injected with dependencies rather than creating them directly.
   Dependency Injection is a design pattern in which an object receives its dependencies from an external source rather than creating them itself. 
   This means an object (e.g., a component or service) does not need to know how to create its dependencies—it only needs to know how to use them. 
   This promotes modularity, testability, and maintainability in code.
   DI in Angular is managed by the Angular injector, which maintains a container of instances that can be used throughout the app.
   
   Key Concepts of Dependency Injection in Angular
   1. Provider: A provider defines how an object (dependency) can be created. Angular uses providers to supply dependencies 
     that need to be injected into components or services. Providers can be registered in different places (e.g., in a component, module, or root level).
   2. Injector: The injector is responsible for creating the dependency instances based on the providers and injecting them where they are needed.
   3. Token: Tokens are used to look up the providers in the DI system. When Angular tries to resolve dependencies, it looks for a matching provider based on the token.
   4. Dependency Injection in Practice: When Angular creates an instance of a component or service, it looks at the constructor of that class. 
     If it finds dependencies listed there, Angular injects them automatically from the DI system.

   Benefits of Dependency Injection in Angular
   1. Code Reusability: 2. Easier Testing:  3. Better Code Organization:
   example :  calling a service into component construter 

Components and Modules
Q. What are the main differences between components and directives in Angular?
Q. How do you organize your Angular modules in a large application?

Data Binding
Q. Can you explain the different types of data binding in Angular?
Q. How does Angular handle change detection?

Services and Dependency Injection
Q. How do you create and use services in Angular?
Q. Can you explain the difference between providedIn: 'root' and providing a service in a module?

Routing
Q. How does Angular's routing mechanism work?
Q. Can you describe lazy loading and its benefits in Angular?

Advanced Topics

State Management
Q. What state management libraries have you used with Angular, and why?
Q. Can you explain how NgRx works and when you might use it?

Performance Optimization
Q. How do you optimize the performance of an Angular application?
Q. What techniques do you use to reduce the bundle size of an Angular app?

Testing
Q. How do you approach testing in Angular?
Q. What are some best practices for unit testing Angular components and services?

Angular CLI and Build Process
Q. How do you use Angular CLI in your development workflow?
Q. Can you explain the build process of an Angular application?

Practical Experience

Project Experience
Q. Can you describe a challenging project you’ve worked on using Angular?
Q. How did you handle a situation where you had to integrate Angular with other technologies (e.g., backend services, third-party libraries)?

Best Practices
Q. What are some best practices you follow for writing clean and maintainable Angular code?
Q. How do you handle error handling and logging in an Angular application?

Upgrading and Migration
Q. Have you ever migrated an application from an older version of Angular to a newer one? If so, what challenges did you face?
Q. How do you keep up with the latest Angular updates and features?

Behavioral and Problem-Solving

Collaboration and Communication
Q. How do you ensure effective communication within your team, especially when working on complex Angular projects?
Q. Can you describe a time when you had to mentor a junior developer in Angular? What approach did you take?

Problem-Solving
Q. Describe a time when you encountered a significant bug in an Angular application. How did you diagnose and fix it?
Q. How do you approach debugging Angular applications?

Future and Trends

Future of Angular
Q. Where do you see the future of Angular going?
Q. Are there any new features or changes in the Angular ecosystem that you are particularly excited about?



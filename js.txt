Q. What’s the difference between JavaScript and ECMAScript?
Ans ECMAScript is a Standard for scripting languages such as JavaScript, JScript, etc. It is a trademark scripting language specification. 
   JavaScript is a language based on ECMAScript. A standard for scripting languages like JavaScript, JScript is ECMAScript. 
   JavaScript is considered as one of the most popular implementations of ECMAScript
   
Q. whats new is latest ecma script?
A. javacript developed by Mocha in 1995. first ecma script edition come in June 1997. from 2015 every year edition released.
   JavaScript's latest update, ECMAScript 2023 (ES14), released in June 2023.
   new array method:
   toSorted(). - toSorted has the same signature as Array.prototype.sort(), but it creates a new array instead of operating on the array itself
   toReversed() -  is the duplicating cousin of reverse()
   with()  - modify a single element based on its index, and get back a new array. it's copy of set() 
	Replace the string "Walrus" with "Octopus".
	const newArr4 = arr4.with(3, "Ape Man");
   findLast() - it return final instance of a matching element from an array.
	const arr = [54, 34, 55, 75, 98, 77];
	const lastEvenIndex = arr.findLast((element) => {
	  return element % 2 === 0;
	});
	console.log(lastEvenIndex); // 98
   findLastIndex() - find the index of the last element matching 

   latest ECMAScript 2021. new changes :- 
   replaceAll  method for strings
   Promise.any 
   AggregateError
	

Q. What is the difference between JavaScript and JScript?
   Netscape provided the JavaScript language. Microsoft changed the name and called it JScript to avoid the trademark issue. 
   In other words, you can say JScript is the same as JavaScript, but Microsoft provides it.
   Difference with javascript  :
  1. Type and Trademark	
	It is a scripting language whose trademark is Oracle Corporation.
	It is also a scripting language but owned by Microsoft.
  2. Developed	
	It was developed in 1995.
	It was developed in 1996.
  3. Active Content Creation
	It does not support active content creation.
	It can create active online content for WWW.
  4. Browsers Compatibility
	All modern browsers support JavaScript.
	It’s only support is Microsoft Internet Explorer.
  5. Compilation
	It’s code can run in any web browser.
	It’s code only run in Microsoft browser.
  6. Object Access
	It cannot access web browser objects
	It can access objects of Microsoft browser
  7. Popularity	
	JavaScript is popular language because it is executed in any browser.
	JScript is not popular language because it limited to internet explorer.
  8. Based On	
	It is based on ECMAScript.
	It is based on Microsoft’s ECMAScript standard.
  9. Scope of Execution	
	It can execute in any browser.
	It cannot execute in any browser and is limited to Internet explorer only.

   
Q. Is JavaScript case sensitive language?  Yes

Q. What is BOM?
   BOM stands for Browser Object Model. It provides interaction with the browser. The default object of a browser is a window. 
   So, you can call all the functions of the window by specifying the window or directly. 
   The window object provides various properties like document, history, screen, navigator, location, innerHeight, innerWidth,
   
Q. What is DOM? What is the use of document object?
   DOM stands for Document Object Model. A document object represents the HTML document. It can be used to access and change the content of HTML.
   
Q. In which location cookies are stored on the hard disk?
	Netscape Navigator - c:\Program Files\Netscape\Users\username\cookies.txt
	Internet Explorer - c:\Windows\Cookies\username@Website.txt.
	
Q. What's the difference between event.preventDefault() and event.stopPropagation() methods in JavaScript?
A. In JavaScript, the event.preventDefault() method is used to prevent the default behavior of an element. 
   On the other hand, the event.stopPropagation() method is used to stop the propagation of an event or 
   stop the event from occurring in the bubbling or capturing phase.
   
Q. How can you check if the event.preventDefault() method was used in an element?
A. When we use the event.defaultPrevent() method in the event object returns a Boolean indicating that 
	the event.preventDefault() was called in a particular element.
	
Q. What are the different data types present in JavaScript?
   There are two types of data types in JavaScript:
	1. Primitive data types  - String, Number, Boolean, BigInt, Undefined, Null, typeof
	2. Non- Primitive data types  - Object, Array,
	
Q. Name the types of functions in JS?
	1. named function  : Named function is the function that we define it in the code and then call it 
		whenever we need it by referencing its name and passing some arguments to it
		function(a, b) {
			console.log(a+b);
		} 
	2. anonymous function : The anonymous functions don’t have names. 
		They need to be tied to something: variable or an event to run.
		let oddEven=function(number){
			if(number%2==0){ return 'EVEN'; } else { return 'ODD'; }			
		}
	3. Immediately invoked function expression : Invoked function expression runs as soon as the browser encounters it. 
		The benefit of this function is that it runs immediately where it’s located in the code and produces a direct output.
		let message =(function(){
			let name = 'gauam'; return name;
		})();
		// imeediatly creates output 
		result; // gautam

Q. Tell something about the undeclared and undefined variables? 
Ans.  undeclared -> not exist, not declared
      undefined -> exist, defined but value not assigned

Q. Variable Declaration vs. Initialization
A. For storing any value, we need a variable, so first, we will declare a var variable 
	and then initialize the value into the variable.
	var myName;  //   declaration
	myName = "my name";  //   initialization
	var myName = "my name";  //   declaration and initialization at the same time
	
Q. what does Scope means?
A. Scope stands for where our variable will be available to use inside our code and where it will not.  
	Function scope : means variable will only be available to use inside the function where it is declared, 
		will not be accessible outside of function
	Block-scope : Block means a pair of curly brackets, a block can be anything that contains an opening and closing curly bracket.
		Variable having Block-scope will only be available to use inside the block it declared

Q. Hoisting of var Variable
A. Hoisting is the default behavior of JavaScript which moves variables and functions to the top of scope before code execution
   and gets assigned the value of undefined.

Q. differene in let, var and const?
	VAR : 
		var has the function or global scope.
		It gets hoisted to the top of its scope 
		it is initialized undefined by default
		It can be updated 
		It can be re-declared.
		It's an old way to declare a variable.
	
		Var variable is the old way to declare a variable in javascript; var variable has the function scope, 
		But global scope when it is declared outside the function.
		var variable can be re-declared and updated. re-declaration allows declaring more than one variable with the same name, 
		because of this reason, if we declare a new variable by mistake, it will override the original variable value
		
		var name = "my name";
		var myAge = 22;
		if(myAge > 18) {
			var name = "another person name";
		}
		console.log(name); //output => "another person name"
	LET : 
		let's have the block scope.
		It also got hoisted to the top of its scope 
		but didn't initialize.
		It can only be updated 
		and can't be re-declared.
		It's a new way to declare variables introduced in ES6.
	
		Let variable introduce a special feature that does not allow re-declaration of variables.
		The let variable has block scope. let variable also get hoisted to the top of the scope But does not get assigned any value.
		
		let myName = "my name";
		let myName = "my new name";
		console.log(myName); //output => SyntaxError: redeclaration of let myName
		
	CONST : 
		const variable has the block scope.
		It also got hoisted to the top of its scope 
		but didn't initialize.
		It can't be updated 
		It can't be re-declared.
		It's also a new way to declare a variable, which introduces in ES6.
		
		
		const declarations are block-scoped. cann't be redclared and re-intialised
	
Q. what is cursor in js?
A. JavaScript cursor is a thing used as a mouse cursor whenever it’s going to point on specific elements. 
   There are various types of cursor available those are like wait, help, move, pointer, crosshair, cell, not allowed, zoom-in, zoom-out, etc. 
   This cursor can be changed by assigning value to document.body.style.cursor.
   
Q. How to set the cursor to wait in JavaScript?
A. The cursor can be set to wait in JavaScript by using the property "cursor". The following example illustrates the usage:
	<script>  
	window.document.body.style.cursor = "wait";   
	</script>
	
Q. What are the pop-up boxes available in JavaScript?
   Alert Box : An alert box is often used if you want to make sure information comes through to the user.
		alert("I am an alert box!");
   Confirm Box : A confirm box is often used if you want the user to verify or accept something.
		if (confirm("Press a button!")) {
		  txt = "You pressed OK!";
		} else {
		  txt = "You pressed Cancel!";
		}
   Prompt Box : A prompt box is often used if you want the user to input a value before entering a page.
		let person = prompt("Please enter your name", "Harry Potter");
	
Q. What is the difference between 'View state' and 'Session state'?
A. "View state" is specific to a page in a session whereas "Session state" is specific to a user or browser 
   that can be accessed across all pages in the web application.

Q. Define closure.
   In JavaScript, we need closures when a variable which is defined outside the scope in reference, is accessed from some inner scope.
	var num = 10;  
	function sum()   
	{  
	document.writeln(num+num);  
	}   
	sum();

Q. How can we detect OS of the client machine using JavaScript?  navigator.appVersion

Q. What is this keyword in JavaScript?
A. The this keyword is a reference variable that refers to the current object.
	
Q. How to handle exceptions in JavaScript?
A.  By the help of try/catch block, we can handle exceptions in JavaScript. 
	JavaScript supports try, catch, finally and throw keywords for exception handling.
	
	The try statement defines a code block to run (to try).
	The catch statement defines a code block to handle any error.
	The finally statement defines a code block to run regardless of the result.
	The throw statement defines a custom error.
	
	try {
		// executable code here
	  }
	  catch(err) {
		message.innerHTML = "Error: " + err + ".";
	  }
	  finally {
		document.getElementById("demo").value = "";
	  }
	
Q. What is the use of debugger keyword in JavaScript?
A. JavaScript debugger keyword sets the breakpoint through the code itself. The debugger stops the execution of the program at the position it is applied.
	
Q. What is the role of a strict mode in JavaScript?
A. JavaScript's strict mode, introduced in ECMAScript 5. This expression can only be placed as the first statement in a script or a function.
   It is not a statement, but a literal expression, ignored by earlier versions of JavaScript.
   The purpose of "use strict" is to indicate that the code should be executed in "strict mode".
   With strict mode, you can not, for example, use undeclared variables.
   
Q. What are the falsy values in JavaScript, and how can we check if a value is falsy?
A. Those values which become false while converting to Boolean are called falsy values.
	const falsyValues = ['', 0, null, undefined, NaN, false];   
	We can check if a value is falsy by using the Boolean function or the Double NOT operator (!!).

Q. What does the isNaN() function?
   The isNan() function returns true if the variable value is not a number.
   
Q. explain foreach in javasccript
A. forEach is a method available on arrays that allows you to iterate over each element in the array and perform a specified action on each element.
   array.forEach(callbackFunction(element, index, array));
   
Q. how to remove an element from an array?
	JavaScript pop() function: This method is used to remove elements from the end of an array.
	JavaScript shift() function: This method is used to remove elements from the start of an array.
	JavaScript splice() function: This method is used to remove elements from the specific index of an array.
	JavaScript filter() function: This method is used to remove elements in a programmatic way.

Q. If we want to return the character from a specific index which method is used?
	var str="Javatpoint";    
	document.writeln(str.charAt(4));
	
Q.  What is the output of 10+20+"30" in JavaScript?  3030
	
Q. output of below code and what if pass 0 in setTimeout inpalce of 1000
	Console.log('1');
	Settimeout(()=>{
	Console.log('2')
	},1000)
	Console.lgo('3')
   using setTimeout with a delay of 0 milliseconds means that the callback function will be executed as soon as possible, 
   but after the current execution stack has cleared.
   When you pass 0 as the delay in setTimeout, it doesn't mean the callback will execute immediately. 
   Instead, it is queued up to be executed after the current code execution completes, and any other queued tasks before it have been processed. 
   This is because JavaScript is single-threaded and runs in an event-driven environment.

Q. typeof(typeof(4+"7")) output : string 

Q. What is the use of a Date object in JavaScript?
A. The JavaScript date object can be used to get a year, month and day. You can display a timer on the webpage by the help of JavaScript date object.

	function display()  
	{  
	  var date=new Date();    
	var day=date.getDate();    
	var month=date.getMonth()+1;    
	var year=date.getFullYear();    
	document.write("<br>Date is: "+day+"/"+month+"/"+year);    
	}  
	display();
	
Q. What is the use of a Set object in JavaScript?
A.  The JavaScript Set object is used to store the elements with unique values. The values can be of any type i.e. whether primitive values or object references. 
	For example:
	function display()  
	{  
	var set = new Set();    
	set.add("jQuery");    
	set.add("AngularJS");    
	set.add("Bootstrap");    
	for (let elements of set) {    
	 document.writeln(elements+"<br>");    
	}     
	}  
	display();
	
Q. What is the use of a WeakSet object in JavaScript?
A. The JavaScript WeakSet object is the type of collection that allows us to store weakly held objects. Unlike Set, the WeakSet are the collections of objects only. 
	It doesn't contain the arbitrary values. For example:

	function display()  
	{  
	var ws = new WeakSet();    
	var obj1={};    
	var obj2={};    
	ws.add(obj1);    
	ws.add(obj2);    
	//Let's check whether the WeakSet object contains the added object    
	document.writeln(ws.has(obj1)+"<br>");    
	document.writeln(ws.has(obj2));     
	}     
	display();
	
Q. What is the use of a Map object in JavaScript?
A. The JavaScript Map object is used to map keys to values. It stores each element as key-value pair. 
    It operates the elements such as search, update and delete on the basis of specified key. For example:

	function display()  
	{  
	var map=new Map();    
	map.set(1,"jQuery");    
	map.set(2,"AngularJS");    
	map.set(3,"Bootstrap");    
	document.writeln(map.get(1)+"<br>");    
	document.writeln(map.get(2)+"<br>");    
	document.writeln(map.get(3));    
	}  
	display();
Q. What is the use of a WeakMap object in JavaScript?
A. The JavaScript WeakMap object is a type of collection which is almost similar to Map. 
   It stores each element as a key-value pair where keys are weakly referenced. 
   Here, the keys are objects and the values are arbitrary values. For example:

function display()  
{  
var wm = new WeakMap();    
var obj1 = {};    
var obj2 = {};    
var obj3= {};    
wm.set(obj1, "jQuery");    
wm.set(obj2, "AngularJS");    
wm.set(obj3,"Bootstrap");    
document.writeln(wm.has(obj2));     
}     
display();	
	
Q.  What is an observable?
   An observable provides a way to emit multiple values over time, which can be processed using various operators, 
   allowing for complex event handling and data transformation.

   How Observables Work
   A. Creating an Observable: You can create an observable using the Observable constructor or various creation operators provided by RxJS.
   B. Subscribing: To use the values emitted by an observable, you need to subscribe to it. 
     Subscribing means providing a function (observer) that defines how to handle each value emitted by the observable
   C. Emitting Values: Once subscribed, the observable can start emitting values. 
     This is done using the next method for normal values, error for errors, and complete to signal that the stream is finished
   D. Unsubscribing: You can unsubscribe from an observable to stop receiving further values, which is useful for cleanup to avoid memory leaks.

	import { Observable } from 'rxjs';
	
	// Create an observable
	const myObservable = new Observable(subscriber => {
	  subscriber.next(1);    // Emit first value
	  subscriber.next(2);    // Emit second value
	  subscriber.next(3);    // Emit third value
	  subscriber.complete(); // Complete the observable
	});
	
	// Subscribe to the observable
	myObservable.subscribe({
	  next(value) {
	    console.log('Received value:', value);
	  },
	  error(err) {
	    console.error('Error occurred:', err);
	  },
	  complete() {
	    console.log('Observable completed');
	  }
	});
	output: 
	Received value: 1
	Received value: 2
	Received value: 3
	Observable completed

Q. waht is promise and what are different states of promise?
A. a Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.
   Different States of a Promise
   A. Pending : This is the initial state of a promise when it is created. The promise is neither fulfilled nor rejected; 
     it's waiting for the asynchronous operation to complete.
   B. Fulfilled (Resolved) : when the asynchronous operation completes successfully.
   C. Rejected : if the asynchronous operation fails.


	const myPromise = new Promise((resolve, reject) => {
	  const success = true; // This can be based on some condition
	
	  if (success) {
	    resolve('Operation was successful!'); // Fulfill the promise
	  } else {
	    reject('Operation failed!'); // Reject the promise
	  }
	});
	
	myPromise
	  .then(result => {
	    console.log(result); // Output if fulfilled: Operation was successful!
	  })
	  .catch(error => {
	    console.error(error); // Output if rejected: Operation failed!
	  });

Q. What is the difference between promise and observable?
   1. Single vs. Multiple Values :
      Promise: Resolves or rejects with a single value.	
      observable: Can emit multiple values over time.
   2. Lazy vs. Eager Execution	
      Promise: Eager: Starts executing immediately upon creation.	
      observable: Lazy: Only starts executing when subscribed.
   3. Cancellation	
      Promise: Cannot be canceled once started.	
      observable: Can be canceled by unsubscribing.
   4. Operators	
      Promise: Limited chaining and transformation (e.g., .then).	
      observable: Extensive set of operators for transformation, filtering, etc.
   5. Handling Events	
      Promise: Not suitable for handling continuous event streams.	
      observable: Ideal for handling continuous event streams.
   6. Memory Consumption	
      Promise: Might consume more memory due to holding state.	
      observable: Can be more memory efficient with proper operators.
   7. Error Handling	
      Promise: Error handling via .catch().	
      observable: Error handling via .catch() and other operators.

  Promise:
   1. Execute immediately on creation
   2. Provide only one value
   3. Push errors to the child promises
   4. Uses only .then() clause
   
    Observable :	                                     
    1. Declarative: Computation does not start until subscription so that they can be run whenever you need the result	                   
    2. Provide multiple values over time	                                                                                                  
    3. Subscribe method is used for error handling which makes centralized and predictable error handling	                                  
    4. Provides chaining and subscription to handle complex applications	
    
 Q. What is the difference between promise and callback 
A.  Callback: A callback is a function passed as an argument to another function, 
   which is then executed inside the outer function to complete some kind of routine or action. 
   In the context of asynchronous operations, a callback function is often called once the operation is complete.
	function fetchData(callback) {
	  setTimeout(() => {
	    const data = "Data fetched";
	    callback(data); // Callback function is called with the data
	  }, 1000);
	}
	
	fetchData(function(data) {
	  console.log(data); // Output after 1 second: Data fetched
	});

Promise example : 
	function fetchData() {
	  return new Promise((resolve, reject) => {
	    setTimeout(() => {
	      const data = "Data fetched";
	      resolve(data); // Resolve the promise with the data
	    }, 1000);
	  });
	}
	
	fetchData()
	  .then(data => {
	    console.log(data); // Output after 1 second: Data fetched
	  })
	  .catch(error => {
	    console.error(error); // Handle error
	  });

 
Q. what is async
A. async refers to a keyword that is used to declare an asynchronous function.
   async Keyword : When you declare a function with the async keyword, it means that the function will always return a Promise. 
     If the function body returns a value, JavaScript will automatically wrap that value in a resolved Promise. 
     If the function throws an error, JavaScript will wrap the error in a rejected Promise.
   await Keyword : async functions are often used together with the await keyword, which allows you to wait for a Promise to be resolved or rejected. 
     The await keyword can only be used inside async functions, and it pauses the execution of the function 
     until the Promise is settled (either resolved or rejected).
	async function fetchData() {
	    try {
		let response = await fetch('https://api.example.com/data');
		let data = await response.json();
		console.log(data);
	    } catch (error) {
		console.error('Error fetching data:', error);
	    }
	}
	
	fetchData();
 
Q. what is arrow function?

Q. we can get value of a input box by both js and jquery but which one will give faster result.

Q. How many data types are there in JavaScript? Can you name them?

Q. what is operator in js 

Q. what is hoisting?

Q. difference in settimeout and setinterval function 

Q. js annotation

Q. Difference between One-way Binding and Two-way Binding

Q. what are the selecters in jquery

Q. how to send ajax request by jquery and javascript?

Q. what are stages of ajax request?

Q. difference between windowload and document.ready() ?

Q. how to reload a page by JS?

Q. What is negative Infinity? - Negative Infinity is a number in JavaScript which can be derived by dividing negative number by zero.

Q. In JavaScript, it is possible for the programmers to convert the string to an integer? 
  Ans. parseInt()

Q.Differene between innerText and innerHTML
	Retrieves and sets the content in plain text.			Retrieves and sets the content in HTML format.
	We can not insert the HTML tags.				We can insert the HTML tags.
	It ignores the spaces.						It considers the spaces.
	It returns text without an inner element tag.			It returns a tag with an inner element tag.
	
Q.What a pop()method in JavaScript is?
	The pop() method is similar to the shift() method, but the difference is that the Shift method works at the array’s start. 
	The pop() method takes the last element off of the given array and returns it. The array on which it is called is then altered
	
Q. What is event bubbling? 
Ans. JavaScript allows DOM elements to be nested inside each other. In such a case, if the handler of the child is clicked, 
	the handler of the parent will also work as if it were clicked too.
	
Q. Write the point of difference between a web garden and a web farm?
Ans. Both web-garden and web-farm are web hosting systems. The only difference is that web-garden is a setup that includes many processors in a single server. 
	At the same time,web-farm is a larger setup that uses more than one server.

Q. getting current url using js, jquery
Ans. var currentURL = window.location.href;	
	$(location).attr('href');      // http://www.refulz.com:8082/index.php#tab2
  	$(location).attr('pathname');  // index.php 		get file name

Q. what is document.ready()

Q. what is $ in jquery

Q. map function is js

Q. compare two array by a single loop

Q. compare two object 

Q. pass by refrence
